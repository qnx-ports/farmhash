diff --git a/src/farmhash.cc b/src/farmhash.cc
index d35b193..7713ae9 100644
--- a/src/farmhash.cc
+++ b/src/farmhash.cc
@@ -55,8 +55,12 @@
 #define FARMHASH_CAN_USE_CXX11 1
 #else
 #undef FARMHASH_CAN_USE_CXX11
+#ifdef __QNXNTO__
+#define FARMHASH_CAN_USE_CXX11 1
+#else
 #define FARMHASH_CAN_USE_CXX11 0
 #endif
+#endif
 
 // FARMHASH PORTABILITY LAYER: Runtime error if misconfigured
 
@@ -114,7 +118,7 @@
 
 #if defined(FARMHASH_UNKNOWN_ENDIAN) || !defined(bswap_64)
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 
 #undef bswap_32
 #undef bswap_64
@@ -165,20 +169,10 @@
 #define bswap_64(x) bswap64(x)
 #endif
 
-#elif defined(__HAIKU__)
-
-#define _BSD_SOURCE
-#include <bsd/endian.h>
-#undef bswap_32
-#undef bswap_64
-#define bswap_32(x) bswap32(x)
-#define bswap_64(x) bswap64(x)
-
 #else
 
 #undef bswap_32
 #undef bswap_64
-#undef _BYTESWAP_H
 #include <byteswap.h>
 
 #endif
@@ -226,7 +220,7 @@ STATIC_INLINE uint64_t BasicRotate64(uint64_t val, int shift) {
   return shift == 0 ? val : ((val >> shift) | (val << (64 - shift)));
 }
 
-#if defined(_WIN32) && defined(FARMHASH_ROTR)
+#if defined(_MSC_VER) && defined(FARMHASH_ROTR)
 
 STATIC_INLINE uint32_t Rotate32(uint32_t val, int shift) {
   return sizeof(unsigned long) == sizeof(val) ?
@@ -1979,7 +1973,24 @@ uint128_t Fingerprint128(const char* s, size_t len) {
 #ifndef FARMHASH_SELF_TEST_GUARD
 #define FARMHASH_SELF_TEST_GUARD
 #include <cstdio>
+#ifdef x86_64
+#undef x86_64
+#endif
+#ifdef x86
+#undef x86
+#endif
 #include <iostream>
+#if defined (__x86_64) || defined (__x86_64__)
+#define x86_64 1
+#else
+#define x86_64 0
+#endif
+#if defined(__i386__) || defined(__i386) || defined(__X86__)
+#define x86 1
+#else
+#define x86 x86_64
+#endif
+
 #include <string.h>
 
 using std::cout;
@@ -1993,7 +2004,11 @@ static const int kDataSize = 1 << 20;
 static const int kTestSize = 300;
 #define kSeed128 Uint128(kSeed0, kSeed1)
 
+#ifdef __QNXNTO__
+static char farmhash_data[kDataSize];
+#else
 static char data[kDataSize];
+#endif
 
 static int completed_self_tests = 0;
 static int errors = 0;
@@ -2009,7 +2024,11 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
+#ifdef __QNXNTO__
+      memcpy(farmhash_data + i, &u, 1);  // uint8_t -> char
+#else
       memcpy(data + i, &u, 1);  // uint8_t -> char
+#endif
     }
   }
 }
@@ -3531,12 +3550,19 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
+#ifdef __QNXNTO__
+if (offset == -1) { int alive = 0; IsAlive(farmhashcc::Hash32WithSeed(farmhash_data, len++, SEED)); IsAlive(farmhashcc::Hash32(farmhash_data, len++)); { uint128_t u = farmhashcc::Fingerprint128(farmhash_data, len++); uint64_t h = Uint128Low64(u); IsAlive(h >> 32); IsAlive((h << 32) >> 32); h = Uint128High64(u); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
+Check(farmhashcc::Hash32WithSeed(farmhash_data + offset, len, SEED));
+Check(farmhashcc::Hash32(farmhash_data + offset, len));
+{ uint128_t u = farmhashcc::Fingerprint128(farmhash_data + offset, len); uint64_t h = Uint128Low64(u); Check(h >> 32); Check((h << 32) >> 32); h = Uint128High64(u); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint128_t u = farmhashcc::CityHash128WithSeed(farmhash_data + offset, len, Uint128(SEED0, SEED1)); uint64_t h = Uint128Low64(u); Check(h >> 32); Check((h << 32) >> 32); h = Uint128High64(u); Check(h >> 32); Check((h << 32) >> 32); }
+#else
 if (offset == -1) { int alive = 0; IsAlive(farmhashcc::Hash32WithSeed(data, len++, SEED)); IsAlive(farmhashcc::Hash32(data, len++)); { uint128_t u = farmhashcc::Fingerprint128(data, len++); uint64_t h = Uint128Low64(u); IsAlive(h >> 32); IsAlive((h << 32) >> 32); h = Uint128High64(u); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
 Check(farmhashcc::Hash32WithSeed(data + offset, len, SEED));
 Check(farmhashcc::Hash32(data + offset, len));
 { uint128_t u = farmhashcc::Fingerprint128(data + offset, len); uint64_t h = Uint128Low64(u); Check(h >> 32); Check((h << 32) >> 32); h = Uint128High64(u); Check(h >> 32); Check((h << 32) >> 32); }
 { uint128_t u = farmhashcc::CityHash128WithSeed(data + offset, len, Uint128(SEED0, SEED1)); uint64_t h = Uint128Low64(u); Check(h >> 32); Check((h << 32) >> 32); h = Uint128High64(u); Check(h >> 32); Check((h << 32) >> 32); }
-
+#endif
   return true;
 #undef Check
 #undef IsAlive
@@ -3567,10 +3593,17 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
+#ifdef __QNXNTO__
+cout << farmhashcc::Hash32WithSeed(farmhash_data + offset, len, SEED) << "u," << endl;
+cout << farmhashcc::Hash32(farmhash_data + offset, len) << "u," << endl;
+{ uint128_t u = farmhashcc::Fingerprint128(farmhash_data + offset, len); uint64_t h = Uint128Low64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u, "; h = Uint128High64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint128_t u = farmhashcc::CityHash128WithSeed(farmhash_data + offset, len, Uint128(SEED0, SEED1)); uint64_t h = Uint128Low64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u, "; h = Uint128High64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+#else
 cout << farmhashcc::Hash32WithSeed(data + offset, len, SEED) << "u," << endl;
 cout << farmhashcc::Hash32(data + offset, len) << "u," << endl;
 { uint128_t u = farmhashcc::Fingerprint128(data + offset, len); uint64_t h = Uint128Low64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u, "; h = Uint128High64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 { uint128_t u = farmhashcc::CityHash128WithSeed(data + offset, len, Uint128(SEED0, SEED1)); uint64_t h = Uint128Low64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u, "; h = Uint128High64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+#endif
 }
 
 #endif
@@ -3613,7 +3646,11 @@ static const int kDataSize = 1 << 20;
 static const int kTestSize = 300;
 #define kSeed128 Uint128(kSeed0, kSeed1)
 
+#ifdef __QNXNTO__
+static char farmhash_data[kDataSize];
+#else
 static char data[kDataSize];
+#endif
 
 static int completed_self_tests = 0;
 static int errors = 0;
@@ -3629,7 +3666,11 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
+#ifdef __QNXNTO__
+      memcpy(farmhash_data + i, &u, 1);  // uint8_t -> char
+#else
       memcpy(data + i, &u, 1);  // uint8_t -> char
+#endif
     }
   }
 }
@@ -4427,9 +4468,15 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
+#ifdef __QNXNTO__
+if (offset == -1) { int alive = 0; IsAlive(farmhashmk::Hash32WithSeed(farmhash_data, len++, SEED)); IsAlive(farmhashmk::Hash32(farmhash_data, len++)); IsAlive(farmhashmk::Hash32(farmhash_data, len++)); len -= 3; return alive > 0; }
+Check(farmhashmk::Hash32WithSeed(farmhash_data + offset, len, SEED));
+Check(farmhashmk::Hash32(farmhash_data + offset, len));
+#else
 if (offset == -1) { int alive = 0; IsAlive(farmhashmk::Hash32WithSeed(data, len++, SEED)); IsAlive(farmhashmk::Hash32(data, len++)); IsAlive(farmhashmk::Hash32(data, len++)); len -= 3; return alive > 0; }
 Check(farmhashmk::Hash32WithSeed(data + offset, len, SEED));
 Check(farmhashmk::Hash32(data + offset, len));
+#endif
 
   return true;
 #undef Check
@@ -4505,7 +4552,11 @@ static const int kDataSize = 1 << 20;
 static const int kTestSize = 300;
 #define kSeed128 Uint128(kSeed0, kSeed1)
 
+#ifdef __QNXNTO__
+static char farmhash_data[kDataSize];
+#else
 static char data[kDataSize];
+#endif
 
 static int completed_self_tests = 0;
 static int errors = 0;
@@ -4521,7 +4572,11 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
+#ifdef __QNXNTO__
+      memcpy(farmhash_data + i, &u, 1);  // uint8_t -> char
+#else
       memcpy(data + i, &u, 1);  // uint8_t -> char
+#endif
     }
   }
 }
@@ -5681,11 +5736,17 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
+#ifdef __QNXNTO__
+if (offset == -1) { int alive = 0; { uint64_t h = farmhashna::Hash64WithSeeds(farmhash_data, len++, SEED0, SEED1); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashna::Hash64WithSeed(farmhash_data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashna::Hash64(farmhash_data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
+{ uint64_t h = farmhashna::Hash64WithSeeds(farmhash_data + offset, len, SEED0, SEED1); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashna::Hash64WithSeed(farmhash_data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashna::Hash64(farmhash_data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
+#else
 if (offset == -1) { int alive = 0; { uint64_t h = farmhashna::Hash64WithSeeds(data, len++, SEED0, SEED1); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashna::Hash64WithSeed(data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashna::Hash64(data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
 { uint64_t h = farmhashna::Hash64WithSeeds(data + offset, len, SEED0, SEED1); Check(h >> 32); Check((h << 32) >> 32); }
 { uint64_t h = farmhashna::Hash64WithSeed(data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
 { uint64_t h = farmhashna::Hash64(data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
-
+#endif
   return true;
 #undef Check
 #undef IsAlive
@@ -5716,9 +5777,15 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
+#ifdef __QNXNTO__
+{ uint64_t h = farmhashna::Hash64WithSeeds(farmhash_data + offset, len, SEED0, SEED1); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashna::Hash64WithSeed(farmhash_data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashna::Hash64(farmhash_data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+#else
 { uint64_t h = farmhashna::Hash64WithSeeds(data + offset, len, SEED0, SEED1); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 { uint64_t h = farmhashna::Hash64WithSeed(data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 { uint64_t h = farmhashna::Hash64(data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+#endif
 }
 
 #endif
@@ -5761,7 +5828,11 @@ static const int kDataSize = 1 << 20;
 static const int kTestSize = 300;
 #define kSeed128 Uint128(kSeed0, kSeed1)
 
+#ifdef __QNXNTO__
+static char farmhash_data[kDataSize];
+#else
 static char data[kDataSize];
+#endif
 
 static int completed_self_tests = 0;
 static int errors = 0;
@@ -5777,7 +5848,11 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
+#ifdef __QNXNTO__
+      memcpy(farmhash_data + i, &u, 1);  // uint8_t -> char
+#else
       memcpy(data + i, &u, 1);  // uint8_t -> char
+#endif
     }
   }
 }
@@ -6575,10 +6650,15 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
+#ifdef __QNXNTO__
+if (offset == -1) { int alive = 0; IsAlive(farmhashnt::Hash32WithSeed(farmhash_data, len++, SEED)); IsAlive(farmhashnt::Hash32(farmhash_data, len++)); IsAlive(farmhashnt::Hash32(farmhash_data, len++)); len -= 3; return alive > 0; }
+Check(farmhashnt::Hash32WithSeed(farmhash_data + offset, len, SEED));
+Check(farmhashnt::Hash32(farmhash_data + offset, len));
+#else
 if (offset == -1) { int alive = 0; IsAlive(farmhashnt::Hash32WithSeed(data, len++, SEED)); IsAlive(farmhashnt::Hash32(data, len++)); IsAlive(farmhashnt::Hash32(data, len++)); len -= 3; return alive > 0; }
 Check(farmhashnt::Hash32WithSeed(data + offset, len, SEED));
 Check(farmhashnt::Hash32(data + offset, len));
-
+#endif
   return true;
 #undef Check
 #undef IsAlive
@@ -6609,8 +6689,13 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
+#ifdef __QNXNTO__
+cout << farmhashnt::Hash32WithSeed(farmhash_data + offset, len, SEED) << "u," << endl;
+cout << farmhashnt::Hash32(farmhash_data + offset, len) << "u," << endl;
+#else
 cout << farmhashnt::Hash32WithSeed(data + offset, len, SEED) << "u," << endl;
 cout << farmhashnt::Hash32(data + offset, len) << "u," << endl;
+#endif
 }
 
 #endif
@@ -6653,7 +6738,11 @@ static const int kDataSize = 1 << 20;
 static const int kTestSize = 300;
 #define kSeed128 Uint128(kSeed0, kSeed1)
 
+#ifdef __QNXNTO__
+static char farmhash_data[kDataSize];
+#else
 static char data[kDataSize];
+#endif
 
 static int completed_self_tests = 0;
 static int errors = 0;
@@ -6669,7 +6758,11 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
+#ifdef __QNXNTO__
+      memcpy(farmhash_data + i, &u, 1);  // uint8_t -> char
+#else
       memcpy(data + i, &u, 1);  // uint8_t -> char
+#endif
     }
   }
 }
@@ -7467,10 +7560,15 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
+#ifdef __QNXNTO__
+if (offset == -1) { int alive = 0; IsAlive(farmhashsa::Hash32WithSeed(farmhash_data, len++, SEED)); IsAlive(farmhashsa::Hash32(farmhash_data, len++)); IsAlive(farmhashsa::Hash32(farmhash_data, len++)); len -= 3; return alive > 0; }
+Check(farmhashsa::Hash32WithSeed(farmhash_data + offset, len, SEED));
+Check(farmhashsa::Hash32(farmhash_data + offset, len));
+#else
 if (offset == -1) { int alive = 0; IsAlive(farmhashsa::Hash32WithSeed(data, len++, SEED)); IsAlive(farmhashsa::Hash32(data, len++)); IsAlive(farmhashsa::Hash32(data, len++)); len -= 3; return alive > 0; }
 Check(farmhashsa::Hash32WithSeed(data + offset, len, SEED));
 Check(farmhashsa::Hash32(data + offset, len));
-
+#endif
   return true;
 #undef Check
 #undef IsAlive
@@ -7501,8 +7599,13 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
+#ifdef __QNXNTO__
+cout << farmhashsa::Hash32WithSeed(farmhash_data + offset, len, SEED) << "u," << endl;
+cout << farmhashsa::Hash32(farmhash_data + offset, len) << "u," << endl;
+#else
 cout << farmhashsa::Hash32WithSeed(data + offset, len, SEED) << "u," << endl;
 cout << farmhashsa::Hash32(data + offset, len) << "u," << endl;
+#endif
 }
 
 #endif
@@ -7545,7 +7648,11 @@ static const int kDataSize = 1 << 20;
 static const int kTestSize = 300;
 #define kSeed128 Uint128(kSeed0, kSeed1)
 
+#ifdef __QNXNTO__
+static char farmhash_data[kDataSize];
+#else
 static char data[kDataSize];
+#endif
 
 static int completed_self_tests = 0;
 static int errors = 0;
@@ -7561,7 +7668,11 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
+#ifdef __QNXNTO__
+      memcpy(farmhash_data + i, &u, 1);  // uint8_t -> char
+#else
       memcpy(data + i, &u, 1);  // uint8_t -> char
+#endif
     }
   }
 }
@@ -8359,10 +8470,15 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
+#ifdef __QNXNTO__
+if (offset == -1) { int alive = 0; IsAlive(farmhashsu::Hash32WithSeed(farmhash_data, len++, SEED)); IsAlive(farmhashsu::Hash32(farmhash_data, len++)); IsAlive(farmhashsu::Hash32(farmhash_data, len++)); len -= 3; return alive > 0; }
+Check(farmhashsu::Hash32WithSeed(farmhash_data + offset, len, SEED));
+Check(farmhashsu::Hash32(farmhash_data + offset, len));
+#else
 if (offset == -1) { int alive = 0; IsAlive(farmhashsu::Hash32WithSeed(data, len++, SEED)); IsAlive(farmhashsu::Hash32(data, len++)); IsAlive(farmhashsu::Hash32(data, len++)); len -= 3; return alive > 0; }
 Check(farmhashsu::Hash32WithSeed(data + offset, len, SEED));
 Check(farmhashsu::Hash32(data + offset, len));
-
+#endif
   return true;
 #undef Check
 #undef IsAlive
@@ -8393,8 +8509,13 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
+#ifdef __QNXNTO__
+cout << farmhashsu::Hash32WithSeed(farmhash_data + offset, len, SEED) << "u," << endl;
+cout << farmhashsu::Hash32(farmhash_data + offset, len) << "u," << endl;
+#else
 cout << farmhashsu::Hash32WithSeed(data + offset, len, SEED) << "u," << endl;
 cout << farmhashsu::Hash32(data + offset, len) << "u," << endl;
+#endif
 }
 
 #endif
@@ -8437,7 +8558,11 @@ static const int kDataSize = 1 << 20;
 static const int kTestSize = 300;
 #define kSeed128 Uint128(kSeed0, kSeed1)
 
+#ifdef __QNXNTO__
+static char farmhash_data[kDataSize];
+#else
 static char data[kDataSize];
+#endif
 
 static int completed_self_tests = 0;
 static int errors = 0;
@@ -8453,7 +8578,11 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
+#ifdef __QNXNTO__
+      memcpy(farmhash_data + i, &u, 1);  // uint8_t -> char
+#else
       memcpy(data + i, &u, 1);  // uint8_t -> char
+#endif
     }
   }
 }
@@ -9613,11 +9742,17 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
+#ifdef __QNXNTO__
+if (offset == -1) { int alive = 0; { uint64_t h = farmhashte::Hash64WithSeeds(farmhash_data, len++, SEED0, SEED1); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashte::Hash64WithSeed(farmhash_data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashte::Hash64(farmhash_data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
+{ uint64_t h = farmhashte::Hash64WithSeeds(farmhash_data + offset, len, SEED0, SEED1); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashte::Hash64WithSeed(farmhash_data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashte::Hash64(farmhash_data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
+#else
 if (offset == -1) { int alive = 0; { uint64_t h = farmhashte::Hash64WithSeeds(data, len++, SEED0, SEED1); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashte::Hash64WithSeed(data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashte::Hash64(data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
 { uint64_t h = farmhashte::Hash64WithSeeds(data + offset, len, SEED0, SEED1); Check(h >> 32); Check((h << 32) >> 32); }
 { uint64_t h = farmhashte::Hash64WithSeed(data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
 { uint64_t h = farmhashte::Hash64(data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
-
+#endif
   return true;
 #undef Check
 #undef IsAlive
@@ -9648,9 +9783,15 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
+#ifdef __QNXNTO__
+{ uint64_t h = farmhashte::Hash64WithSeeds(farmhash_data + offset, len, SEED0, SEED1); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashte::Hash64WithSeed(farmhash_data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashte::Hash64(farmhash_data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+#else
 { uint64_t h = farmhashte::Hash64WithSeeds(data + offset, len, SEED0, SEED1); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 { uint64_t h = farmhashte::Hash64WithSeed(data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 { uint64_t h = farmhashte::Hash64(data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+#endif
 }
 
 #endif
@@ -9693,7 +9834,11 @@ static const int kDataSize = 1 << 20;
 static const int kTestSize = 300;
 #define kSeed128 Uint128(kSeed0, kSeed1)
 
+#ifdef __QNXNTO__
+static char farmhash_data[kDataSize];
+#else
 static char data[kDataSize];
+#endif
 
 static int completed_self_tests = 0;
 static int errors = 0;
@@ -9709,7 +9854,11 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
+#ifdef __QNXNTO__
+      memcpy(farmhash_data + i, &u, 1);  // uint8_t -> char
+#else
       memcpy(data + i, &u, 1);  // uint8_t -> char
+#endif
     }
   }
 }
@@ -10507,10 +10656,15 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
+#ifdef __QNXNTO__
+if (offset == -1) { int alive = 0; { uint64_t h = farmhashuo::Hash64WithSeed(farmhash_data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashuo::Hash64(farmhash_data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashuo::Hash64(farmhash_data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
+{ uint64_t h = farmhashuo::Hash64WithSeed(farmhash_data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashuo::Hash64(farmhash_data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
+#else
 if (offset == -1) { int alive = 0; { uint64_t h = farmhashuo::Hash64WithSeed(data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashuo::Hash64(data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashuo::Hash64(data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
 { uint64_t h = farmhashuo::Hash64WithSeed(data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
 { uint64_t h = farmhashuo::Hash64(data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
-
+#endif
   return true;
 #undef Check
 #undef IsAlive
@@ -10541,8 +10695,13 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
+#ifdef __QNXNTO__
+{ uint64_t h = farmhashuo::Hash64WithSeed(farmhash_data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashuo::Hash64(farmhash_data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+#else
 { uint64_t h = farmhashuo::Hash64WithSeed(data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 { uint64_t h = farmhashuo::Hash64(data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+#endif
 }
 
 #endif
@@ -10585,7 +10744,11 @@ static const int kDataSize = 1 << 20;
 static const int kTestSize = 300;
 #define kSeed128 Uint128(kSeed0, kSeed1)
 
+#ifdef __QNXNTO__
+static char farmhash_data[kDataSize];
+#else
 static char data[kDataSize];
+#endif
 
 static int completed_self_tests = 0;
 static int errors = 0;
@@ -10601,7 +10764,11 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
+#ifdef __QNXNTO__
+      memcpy(farmhash_data + i, &u, 1);  // uint8_t -> char
+#else
       memcpy(data + i, &u, 1);  // uint8_t -> char
+#endif
     }
   }
 }
@@ -11761,11 +11928,17 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
+#ifdef __QNXNTO__
+if (offset == -1) { int alive = 0; { uint64_t h = farmhashxo::Hash64WithSeeds(farmhash_data, len++, SEED0, SEED1); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashxo::Hash64WithSeed(farmhash_data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashxo::Hash64(farmhash_data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
+{ uint64_t h = farmhashxo::Hash64WithSeeds(farmhash_data + offset, len, SEED0, SEED1); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashxo::Hash64WithSeed(farmhash_data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashxo::Hash64(farmhash_data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
+#else
 if (offset == -1) { int alive = 0; { uint64_t h = farmhashxo::Hash64WithSeeds(data, len++, SEED0, SEED1); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashxo::Hash64WithSeed(data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashxo::Hash64(data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
 { uint64_t h = farmhashxo::Hash64WithSeeds(data + offset, len, SEED0, SEED1); Check(h >> 32); Check((h << 32) >> 32); }
 { uint64_t h = farmhashxo::Hash64WithSeed(data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
 { uint64_t h = farmhashxo::Hash64(data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
-
+#endif
   return true;
 #undef Check
 #undef IsAlive
@@ -11796,9 +11969,15 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
+#ifdef __QNXNTO__
+{ uint64_t h = farmhashxo::Hash64WithSeeds(farmhash_data + offset, len, SEED0, SEED1); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashxo::Hash64WithSeed(farmhash_data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashxo::Hash64(farmhash_data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+#else
 { uint64_t h = farmhashxo::Hash64WithSeeds(data + offset, len, SEED0, SEED1); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 { uint64_t h = farmhashxo::Hash64WithSeed(data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 { uint64_t h = farmhashxo::Hash64(data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+#endif
 }
 
 #endif
